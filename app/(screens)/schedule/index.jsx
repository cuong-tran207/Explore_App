import {
  View,
  Text,
  ScrollView,
  Pressable,
  TouchableOpacity,
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { Ionicons } from "@expo/vector-icons";
import Animated, { FadeInDown } from "react-native-reanimated";
import { useState } from "react";
import { useNavigation } from "expo-router";
import Detail from "./detail";
import axios from "axios";

const schedules = [
  {
    id: 1,
    name: "1 ng√†y",
    days: 1,
    difficulty: "Ch·ªõp nho√°ng",
    hoursPerDay: 24,
    description:
      "L·ªãch tr√¨nh tham quan nhanh g·ªçn, t·∫≠p trung v√†o nh·ªØng ƒëi·ªÉm n·ªïi b·∫≠t trong th·ªùi gian ng·∫Øn.",
    color: "#22C55E",
  },
  {
    id: 2,
    name: "2 ng√†y",
    days: 2,
    difficulty: "Ng·∫Øn h·∫°n",
    hoursPerDay: 24,
    description:
      "L·ªãch tr√¨nh k·∫øt h·ª£p tham quan v√† tr·∫£i nghi·ªám c∆° b·∫£n trong th·ªùi gian ng·∫Øn.",
    color: "#3B82F6",
  },
  {
    id: 3,
    name: "3 ng√†y",
    days: 3,
    difficulty: "C√¢n b·∫±ng",
    hoursPerDay: 24,
    description:
      "L·ªãch tr√¨nh ph√π h·ª£p ƒë·ªÉ kh√°m ph√° k·∫øt h·ª£p gi·ªØa tham quan, ·∫©m th·ª±c v√† ngh·ªâ ng∆°i.",
    color: "#F59E0B",
  },
  {
    id: 4,
    name: "4 ng√†y tr·ªü l√™n",
    days: 4,
    difficulty: "To√†n di·ªán",
    hoursPerDay: 24,
    description:
      "L·ªãch tr√¨nh to√†n di·ªán, c√≥ th·ªÉ kh√°m ph√° s√¢u v·ªÅ vƒÉn h√≥a, thi√™n nhi√™n v√† ƒë·∫∑c s·∫£n ƒë·ªãa ph∆∞∆°ng.",
    color: "#EF4444",
  },
];

const languages = [
  { id: "vi", name: "Vietnamese", flag: "üáªüá≥" },
  { id: "en", name: "English", flag: "üá∫üá∏" },
  { id: "es", name: "Spanish", flag: "üá™üá∏" },
  { id: "fr", name: "French", flag: "üá´üá∑" },
  { id: "de", name: "German", flag: "üá©üá™" },
  { id: "it", name: "Italian", flag: "üáÆüáπ" },
  { id: "jp", name: "Japanese", flag: "üáØüáµ" },
  { id: "kr", name: "Korean", flag: "üá∞üá∑" },
  { id: "cn", name: "Chinese", flag: "üá®üá≥" },
  { id: "ru", name: "Russian", flag: "üá∑üá∫" },
];

const plan = {
  summary:
    "H√†nh tr√¨nh 3 ng√†y kh√°m ph√° Ngh·ªá An ƒë∆∞a b·∫°n ƒë·∫øn v·ªõi nh·ªØng ƒë·ªãa danh l·ªãch s·ª≠, vƒÉn h√≥a n·ªïi ti·∫øng, nh·ªØng b√£i bi·ªÉn ƒë·∫πp v√† th∆∞·ªüng th·ª©c ·∫©m th·ª±c ƒë·∫∑c s·∫Øc c·ªßa v√πng ƒë·∫•t n√†y.",
  days: [
    {
      day: "Ng√†y 1",
      image:
        "https://upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Quang_truong_Ho_Chi_Minh_Vinh_City.jpg/1280px-Quang_truong_Ho_Chi_Minh_Vinh_City.jpg",
      activities: {
        morning:
          "ƒê·∫øn th√†nh ph·ªë Vinh, nh·∫≠n ph√≤ng kh√°ch s·∫°n v√† tham quan Qu·∫£ng tr∆∞·ªùng H·ªì Ch√≠ Minh, B·∫£o t√†ng H·ªì Ch√≠ Minh.",
        afternoon: "Tham quan Khu di t√≠ch l·ªãch s·ª≠ Tru√¥ng B·ªìn.",
        evening: "ƒÇn t·ªëi t·∫°i nh√† h√†ng ƒë·∫∑c s·∫£n Ngh·ªá An, th∆∞·ªüng th·ª©c ch√°o l∆∞∆°n.",
      },
    },
    {
      day: "Ng√†y 2",
      image:
        "https://upload.wikimedia.org/wikipedia/commons/thumb/6/61/Cua_Lo_Beach.jpg/1280px-Cua_Lo_Beach.jpg",
      activities: {
        morning:
          "Di chuy·ªÉn ƒë·∫øn C·ª≠a L√≤, t·∫Øm bi·ªÉn v√† tham gia c√°c ho·∫°t ƒë·ªông th·ªÉ thao d∆∞·ªõi n∆∞·ªõc.",
        afternoon: "ƒÇn tr∆∞a h·∫£i s·∫£n t∆∞∆°i ngon t·∫°i C·ª≠a L√≤.",
        evening: "Th∆∞·ªüng th·ª©c h·∫£i s·∫£n n∆∞·ªõng t·∫°i b·ªù bi·ªÉn C·ª≠a L√≤.",
      },
    },
    {
      day: "Ng√†y 3",
      image:
        "https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/ThacKem2.JPG/1280px-ThacKem2.JPG",
      activities: {
        morning: "Tham quan L√†ng Sen qu√™ B√°c.",
        afternoon: "Mua s·∫Øm ƒë·∫∑c s·∫£n Ngh·ªá An l√†m qu√†.",
        evening: "ƒÇn t·ªëi v√† di chuy·ªÉn ra s√¢n bay/ga t√†u, k·∫øt th√∫c h√†nh tr√¨nh.",
      },
    },
  ],
};

export default function ScheduleScreen() {
  const navigation = useNavigation();
  const [step, setStep] = useState(1);
  const [selectedSchedule, setSelectedSchedule] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState(false);

  const renderPlan = async () => {
    if (step < 2) {
      setStep(step + 1);
    } else {
      // console.log("Final selection:", {
      //   schedule: selectedSchedule,
      //   language: selectedLanguage,
      // });
      const res = await axios.get(
        `https://5601-171-242-75-98.ngrok-free.app/api/gen-ai/chat?sessionId=${random}&message=${encodedMessage}`
      );
      setStep(3);
    }
  };

  const renderScheduleSelection = () => (
    <>
      <Animated.View
        entering={FadeInDown.delay(100).duration(500)}
        className="mt-4 mb-6"
      >
        <View className="flex-row items-center gap-3 my-2">
          <TouchableOpacity onPressOut={() => navigation.goBack()}>
            <Ionicons
              className="p-2 rounded-3xl"
              style={{
                boxShadow:
                  "rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px",
              }}
              name="arrow-back"
              size={25}
              color="black"
            />
          </TouchableOpacity>
          <Text className="text-2xl font-bold">G·ª£i √Ω du l·ªãch</Text>
        </View>
      </Animated.View>

      <View className="space-y-4">
        {schedules.map((schedule, index) => (
          <Animated.View
            key={schedule.id}
            entering={FadeInDown.delay(200 + index * 100).duration(400)}
          >
            <Pressable
              onPress={() => setSelectedSchedule(schedule.id)}
              className={`p-4 rounded-xl border-2 ${
                selectedSchedule === schedule.id
                  ? "border-primary-500 bg-primary-50"
                  : "border-gray-100 bg-white"
              }`}
            >
              <View className="flex-row justify-between items-center mb-3">
                <View className="flex-row items-center">
                  <View
                    style={{ backgroundColor: schedule.color }}
                    className="w-10 h-10 rounded-full items-center justify-center mr-3"
                  >
                    <Text className="text-white font-bold">
                      {schedule.days}d
                    </Text>
                  </View>
                  <View>
                    <Text className="text-lg font-semibold text-gray-800">
                      {schedule.name}
                    </Text>
                    <Text className="text-sm text-gray-500">
                      {schedule.difficulty}
                    </Text>
                  </View>
                </View>
                {selectedSchedule === schedule.id && (
                  <Ionicons name="checkmark-circle" size={24} color="#8B5CF6" />
                )}
              </View>

              <View className="mb-3">
                <Text className="text-gray-600">{schedule.description}</Text>
              </View>

              <View className="flex-row justify-between items-center pt-3 border-t border-gray-100">
                <View className="flex-row items-center">
                  <Ionicons name="time-outline" size={20} color="#6B7280" />
                  <Text className="text-gray-600 ml-2">
                    {schedule.hoursPerDay} gi·ªù/ng√†y
                  </Text>
                </View>
              </View>
            </Pressable>
          </Animated.View>
        ))}
      </View>
    </>
  );

  const renderLanguageSelection = () => (
    <>
      <Animated.View
        entering={FadeInDown.delay(100).duration(500)}
        className="mt-4 mb-6"
      >
        <View className="flex-row items-center gap-3 my-2">
          <TouchableOpacity onPressOut={() => navigation.goBack()}>
            <Ionicons
              className="p-2 rounded-3xl"
              style={{
                boxShadow:
                  "rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px",
              }}
              name="arrow-back"
              size={25}
              color="black"
            />
          </TouchableOpacity>
          <Text className="text-2xl font-bold">Ch·ªçn ng√¥n ng·ªØ</Text>
        </View>
      </Animated.View>

      <View className="flex-row flex-wrap justify-between">
        {languages.map((language, index) => (
          <Animated.View
            key={language.id}
            entering={FadeInDown.delay(200 + index * 100).duration(400)}
            className="w-[48%] mb-4"
          >
            <Pressable
              onPress={() => setSelectedLanguage(language.name)}
              className={`p-4 rounded-xl border-2 ${
                selectedLanguage === language.name
                  ? "border-primary-500 bg-primary-50"
                  : "border-gray-100 bg-white"
              }`}
            >
              <Text className="text-4xl mb-2">{language.flag}</Text>
              <Text className="text-lg font-semibold text-gray-800">
                {language.name}
              </Text>
              {selectedLanguage === language.name && (
                <View className="absolute top-2 right-2">
                  <Ionicons name="checkmark-circle" size={24} color="#8B5CF6" />
                </View>
              )}
            </Pressable>
          </Animated.View>
        ))}
      </View>
    </>
  );

  const isNextEnabled = () => {
    if (step === 1) return !!selectedSchedule;
    if (step === 2) return !!selectedLanguage;
    if (step === 3) return false;
    return true;
  };

  return (
    <SafeAreaView className="flex-1 bg-white">
      <ScrollView className="flex-1 px-4" showsVerticalScrollIndicator={false}>
        {step === 1 && renderScheduleSelection()}
        {step === 2 && renderLanguageSelection()}
        {step === 3 && <Detail plan={plan} />}

        <Animated.View
          entering={FadeInDown.delay(600).duration(400)}
          className="mt-6 mb-8"
        >
          <Pressable
            className={`py-4 rounded-xl ${
              !isNextEnabled() ? "bg-primary-500" : "bg-gray-100"
            }`}
            disabled={!isNextEnabled()}
            onPress={() => renderPlan()}
          >
            <Text
              className={`text-center font-semibold ${
                !isNextEnabled() ? "text-white" : "text-gray-900"
              }`}
            >
              {step === 2 ? "Confirm Selection" : "Continue"}
            </Text>
          </Pressable>
        </Animated.View>
      </ScrollView>
    </SafeAreaView>
  );
}
